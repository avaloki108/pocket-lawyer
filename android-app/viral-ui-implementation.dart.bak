// lib/presentation/viral_home_screen.dart
// VIRAL UI WITH GAMIFICATION, ANIMATIONS, AND ENGAGEMENT FEATURES

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:shimmer/shimmer.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:app_review/app_review.dart';
import 'package:confetti/confetti.dart';

class ViralHomeScreen extends ConsumerStatefulWidget {
  const ViralHomeScreen({super.key});
  
  @override
  ConsumerState<ViralHomeScreen> createState() => _ViralHomeScreenState();
}

class _ViralHomeScreenState extends ConsumerState<ViralHomeScreen> 
    with TickerProviderStateMixin {
  
  // ANIMATION CONTROLLERS
  late AnimationController _pulseController;
  late AnimationController _slideController;
  late ConfettiController _confettiController;
  
  // ENGAGEMENT TRACKING
  final int _dailyStreak = 0;
  final int _questionsAsked = 0;
  final int _pointsEarned = 0;
  final bool _hasProAccess = false;
  
  // VIRAL FEATURE FLAGS
  final Map<String, bool> _unlockedFeatures = {
    'voice_input': false,
    'document_scanner': false,
    'legal_calculator': false,
    'case_search': false,
    'ai_negotiator': false,
    'team_collaboration': false,
  };
  
  @override
  void initState() {
    super.initState();
    _initializeControllers();
    _checkUserStatus();
    _loadDailyContent();
    _setupPushNotifications();
    _trackAppOpen();
  }
  
  void _initializeControllers() {
    _pulseController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _confettiController = ConfettiController(
      duration: const Duration(seconds: 3),
    );
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // GRADIENT BACKGROUND WITH ANIMATED MESH
          _buildAnimatedBackground(),
          
          // MAIN CONTENT
          SafeArea(
            child: CustomScrollView(
              physics: const BouncingScrollPhysics(),
              slivers: [
                // ANIMATED APP BAR
                _buildSliverAppBar(),
                
                // GAMIFICATION HEADER
                _buildGamificationHeader(),
                
                // QUICK ACTION CARDS (VIRAL FEATURES)
                _buildQuickActions(),
                
                // AI CHAT FLOATING BUTTON
                _buildAIChatSection(),
                
                // LEGAL TEMPLATES CAROUSEL
                _buildTemplatesCarousel(),
                
                // CASE OF THE DAY
                _buildCaseOfTheDay(),
                
                // COMMUNITY SECTION
                _buildCommunitySection(),
                
                // PREMIUM UPSELL
                if (!_hasProAccess) _buildPremiumUpsell(),
              ],
            ),
          ),
          
          // CONFETTI OVERLAY
          _buildConfettiOverlay(),
          
          // FLOATING AI ASSISTANT
          _buildFloatingAIAssistant(),
        ],
      ),
    );
  }
  
  Widget _buildAnimatedBackground() {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Colors.indigo.shade900,
            Colors.purple.shade800,
            Colors.blue.shade900,
          ],
          stops: const [0.0, 0.5, 1.0],
        ),
      ),
      child: CustomPaint(
        painter: AnimatedMeshPainter(_pulseController),
        child: Container(),
      ),
    );
  }
  
  Widget _buildSliverAppBar() {
    return SliverAppBar(
      expandedHeight: 200.0,
      floating: true,
      pinned: true,
      backgroundColor: Colors.transparent,
      flexibleSpace: FlexibleSpaceBar(
        title: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.balance, color: Colors.white, size: 24),
            const SizedBox(width: 8),
            Text(
              'Pocket Lawyer',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 20,
                shadows: [
                  Shadow(
                    blurRadius: 10.0,
                    color: Colors.black45,
                    offset: Offset(2, 2),
                  ),
                ],
              ),
            ),
          ],
        ).animate()
          .fadeIn(duration: 600.ms)
          .slideX(begin: -0.2, end: 0),
        background: Stack(
          fit: StackFit.expand,
          children: [
            // Parallax effect background
            Image.asset(
              'assets/images/legal_hero.jpg',
              fit: BoxFit.cover,
              color: Colors.black.withOpacity(0.4),
              colorBlendMode: BlendMode.darken,
            ),
            // Gradient overlay
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    Colors.transparent,
                    Colors.black87,
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
      actions: [
        // NOTIFICATIONS WITH BADGE
        Stack(
          children: [
            IconButton(
              icon: Icon(Icons.notifications_outlined),
              onPressed: () => _showNotifications(),
            ),
            if (_hasNewNotifications())
              Positioned(
                right: 8,
                top: 8,
                child: Container(
                  width: 12,
                  height: 12,
                  decoration: BoxDecoration(
                    color: Colors.red,
                    shape: BoxShape.circle,
                  ),
                ).animate(
                  onPlay: (controller) => controller.repeat(),
                ).scale(
                  begin: Offset(1, 1),
                  end: Offset(1.2, 1.2),
                  duration: 1.seconds,
                ),
              ),
          ],
        ),
        // PROFILE WITH STREAK
        _buildProfileButton(),
      ],
    );
  }
  
  Widget _buildGamificationHeader() {
    return SliverToBoxAdapter(
      child: Container(
        margin: EdgeInsets.all(16),
        padding: EdgeInsets.all(20),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.amber.shade700,
              Colors.orange.shade700,
            ],
          ),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.amber.withOpacity(0.3),
              blurRadius: 20,
              offset: Offset(0, 10),
            ),
          ],
        ),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildStatCard('🔥', '$_dailyStreak', 'Day Streak'),
                _buildStatCard('⚖️', '$_questionsAsked', 'Cases Solved'),
                _buildStatCard('💎', '$_pointsEarned', 'Points'),
              ],
            ),
            const SizedBox(height: 16),
            // PROGRESS BAR TO NEXT LEVEL
            Column(
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Legal Eagle',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      'Level ${_calculateLevel()}',
                      style: TextStyle(color: Colors.white70),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                LinearProgressIndicator(
                  value: _calculateProgress(),
                  backgroundColor: Colors.white24,
                  valueColor: AlwaysStoppedAnimation(Colors.white),
                  minHeight: 8,
                ).animate().scaleX(
                  begin: 0,
                  end: 1,
                  duration: 1.seconds,
                  curve: Curves.easeOutBack,
                ),
              ],
            ),
          ],
        ),
      ).animate()
        .fadeIn(duration: 800.ms)
        .slideY(begin: 0.2, end: 0),
    );
  }
  
  Widget _buildQuickActions() {
    final actions = [
      QuickAction(
        icon: Icons.mic,
        title: 'Voice Legal Q&A',
        gradient: [Colors.purple, Colors.pink],
        onTap: () => _startVoiceQuery(),
        isPremium: false,
      ),
      QuickAction(
        icon: Icons.document_scanner,
        title: 'Scan Document',
        gradient: [Colors.blue, Colors.cyan],
        onTap: () => _scanDocument(),
        isPremium: !_unlockedFeatures['document_scanner']!,
      ),
      QuickAction(
        icon: Icons.calculate,
        title: 'Legal Calculator',
        gradient: [Colors.green, Colors.teal],
        onTap: () => _openCalculator(),
        isPremium: false,
      ),
      QuickAction(
        icon: Icons.search,
        title: 'Case Search',
        gradient: [Colors.orange, Colors.red],
        onTap: () => _searchCases(),
        isPremium: !_unlockedFeatures['case_search']!,
      ),
    ];
    
    return SliverPadding(
      padding: EdgeInsets.symmetric(horizontal: 16),
      sliver: SliverGrid(
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          childAspectRatio: 1.5,
          crossAxisSpacing: 16,
          mainAxisSpacing: 16,
        ),
        delegate: SliverChildBuilderDelegate(
          (context, index) {
            final action = actions[index];
            return _buildActionCard(action).animate()
              .fadeIn(delay: (100 * index).ms)
              .scale(begin: Offset(0.8, 0.8), end: Offset(1, 1));
          },
          childCount: actions.length,
        ),
      ),
    );
  }
  
  Widget _buildActionCard(QuickAction action) {
    return GestureDetector(
      onTap: action.isPremium && !_hasProAccess
          ? () => _showPremiumDialog(action.title)
          : action.onTap,
      child: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: action.gradient,
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: action.gradient.first.withOpacity(0.4),
              blurRadius: 15,
              offset: Offset(0, 8),
            ),
          ],
        ),
        child: Stack(
          children: [
            // Shimmer effect
            if (!action.isPremium)
              Positioned.fill(
                child: Shimmer.fromColors(
                  baseColor: Colors.transparent,
                  highlightColor: Colors.white24,
                  period: Duration(seconds: 3),
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(20),
                    ),
                  ),
                ),
              ),
            // Content
            Padding(
              padding: EdgeInsets.all(16),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    action.icon,
                    size: 32,
                    color: Colors.white,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    action.title,
                    style: TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 14,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),
            // Premium badge
            if (action.isPremium)
              Positioned(
                top: 8,
                right: 8,
                child: Container(
                  padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.yellow.shade700,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    'PRO',
                    style: TextStyle(
                      color: Colors.white,
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildFloatingAIAssistant() {
    return Positioned(
      bottom: 20,
      right: 20,
      child: GestureDetector(
        onTap: _openAIChat,
        child: Container(
          width: 70,
          height: 70,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            gradient: LinearGradient(
              colors: [Colors.purple, Colors.deepPurple],
            ),
            boxShadow: [
              BoxShadow(
                color: Colors.purple.withOpacity(0.5),
                blurRadius: 20,
                offset: Offset(0, 10),
              ),
            ],
          ),
          child: Stack(
            alignment: Alignment.center,
            children: [
              // Pulsing ring animation
              Container(
                width: 70,
                height: 70,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  border: Border.all(
                    color: Colors.white.withOpacity(0.3),
                    width: 2,
                  ),
                ),
              ).animate(
                onPlay: (controller) => controller.repeat(),
              ).scale(
                begin: Offset(1, 1),
                end: Offset(1.3, 1.3),
                duration: 2.seconds,
              ).fadeOut(
                begin: 1,
                end: 0,
                duration: 2.seconds,
              ),
              // AI Icon
              Icon(
                Icons.auto_awesome,
                color: Colors.white,
                size: 30,
              ),
            ],
          ),
        ),
      ).animate()
        .slideY(begin: 2, end: 0, duration: 800.ms, curve: Curves.elasticOut)
        .fadeIn(),
    );
  }
  
  // ... Additional helper methods ...
  
  void _openAIChat() {
    HapticFeedback.mediumImpact();
    Navigator.pushNamed(context, '/chat', arguments: {'premium': _hasProAccess});
  }
  
  void _showPremiumDialog(String feature) {
    _confettiController.play();
    showModalBottomSheet(
      context: context,
      backgroundColor: Colors.transparent,
      isScrollControlled: true,
      builder: (context) => PremiumUpgradeSheet(
        feature: feature,
        onUpgrade: _purchasePremium,
      ),
    );
  }
  
  Future<void> _purchasePremium() async {
    // RevenueCat or Google Play Billing implementation
    final InAppPurchase inAppPurchase = InAppPurchase.instance;
    // ... purchase logic ...
  }
  
  // ... Additional methods ...
}

// SUPPORTING CLASSES
class QuickAction {
  final IconData icon;
  final String title;
  final List<Color> gradient;
  final VoidCallback onTap;
  final bool isPremium;
  
  QuickAction({
    required this.icon,
    required this.title,
    required this.gradient,
    required this.onTap,
    this.isPremium = false,
  });
}

class AnimatedMeshPainter extends CustomPainter {
  final Animation<double> animation;
  
  AnimatedMeshPainter(this.animation) : super(repaint: animation);
  
  @override
  void paint(Canvas canvas, Size size) {
    // Complex mesh animation for background
    // ... painting logic ...
  }
  
  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}